import { HandlerEvent, HandlerContext, HandlerResponse } from './utils/api-utils';
import neo4j from 'neo4j-driver';
import {
  corsHeaders,
  createResponse,
  successResponse,
  errorResponse,
  handleCors,
  parseBody,
  validateRequiredFields,
  extractIdFromPath,
  authenticateRequest,
  logRequest,
} from './utils/api-utils';
import { validateRequestSize } from './utils/size-validator';
import { withUnifiedDatabase, unifiedDatabase } from './utils/unified-db';

const NEO4J_URI = process.env.NEO4J_URI || 'bolt://localhost:7687';
const NEO4J_USERNAME = process.env.NEO4J_USERNAME || 'neo4j';
const NEO4J_PASSWORD = process.env.NEO4J_PASSWORD || 'password';

// Neo4j driver initialization (for compatibility with existing code)
const driver = neo4j.driver(NEO4J_URI, neo4j.auth.basic(NEO4J_USERNAME, NEO4J_PASSWORD));

// Opportunity API Handler - without size validation
const opportunitiesHandler = async (
  event: HandlerEvent,
  context: HandlerContext
): Promise<HandlerResponse> => {
  logRequest(event, context);

  // Handle CORS preflight requests
  if (event.httpMethod === 'OPTIONS') {
    return handleCors();
  }

  // Basic authentication check
  if (!authenticateRequest(event)) {
    return errorResponse(401, 'Unauthorized');
  }

  // Validate request size
  const maxSizeInBytes = 1024 * 1024; // 1 MB
  if (!validateRequestSize(event, maxSizeInBytes)) {
    return errorResponse(413, 'Request entity too large. Maximum size is 1MB.');
  }

  try {
    const opportunityId = extractIdFromPath(event.path);

    switch (event.httpMethod) {
      case 'GET':
        return await handleGetOpportunities(opportunityId, event);
      case 'POST':
        return await handleCreateOpportunity(event);
      case 'PUT':
        if (!opportunityId) {
          return errorResponse(400, 'Opportunity ID is required for updates');
        }
        return await handleUpdateOpportunity(opportunityId, event);
      case 'DELETE':
        if (!opportunityId) {
          return errorResponse(400, 'Opportunity ID is required for deletion');
        }
        return await handleDeleteOpportunity(opportunityId);
      default:
        return errorResponse(405, 'Method not allowed');
    }
  } catch (error) {
    console.error('Opportunities API error:', error);
    return errorResponse(500, 'Internal server error');
  }
};

// Get opportunities (all, specific opportunity, or by lead)
const handleGetOpportunities = async (
  opportunityId?: string | null,
  event?: HandlerEvent
): Promise<HandlerResponse> => {
  try {
    return await withUnifiedDatabase(async () => {
      if (opportunityId) {
        // Get specific opportunity
        const opportunity = await unifiedDatabase.opportunity.findById(opportunityId);

        if (!opportunity) {
          return errorResponse(404, 'Opportunity not found');
        }

        return successResponse(opportunity);
      } else {
        // Check for leadId query parameter
        const leadId = event?.queryStringParameters?.leadId;

        if (leadId) {
          // Get opportunities for specific lead
          const opportunities = await unifiedDatabase.opportunity.findByLead(leadId);
          return successResponse(opportunities);
        } else {
          // Get all opportunities
          const opportunities = await unifiedDatabase.opportunity.findMany();
          return successResponse(opportunities);
        }
      }
    });
  } catch (error) {
    console.error('Error getting opportunities:', error);
    return errorResponse(500, 'Error getting opportunities');
  }
};

// Create new opportunity
const handleCreateOpportunity = async (event: HandlerEvent): Promise<HandlerResponse> => {
  const body = parseBody(event);

  if (!body) {
    return errorResponse(400, 'Request body is required');
  }

  const missingFields = validateRequiredFields(body, ['title', 'amount', 'leadId']);
  if (missingFields.length > 0) {
    return errorResponse(400, `Missing required fields: ${missingFields.join(', ')}`);
  }

  // Validate amount is a positive number
  const amount = parseFloat(body.amount);
  if (isNaN(amount) || amount < 0) {
    return errorResponse(400, 'Amount must be a positive number');
  }

  // Validate stage if provided
  const validStages = ['PROSPECT', 'QUALIFIED', 'PROPOSAL', 'NEGOTIATION', 'CLOSED_WON', 'CLOSED_LOST'];
  if (body.stage && validStages.indexOf(body.stage) === -1) {
    return errorResponse(400, `Invalid stage. Must be one of: ${validStages.join(', ')}`);
  }

  const opportunityId = crypto.randomUUID();
  const opportunityData = {
    id: opportunityId,
    title: body.title,
    amount: amount,
    stage: body.stage || 'PROSPECT',
    leadId: body.leadId,
    assignedTo: body.assignedTo || null,
    createdAt: new Date().toISOString(),
  };

  try {
    return await withUnifiedDatabase(async () => {
      // Create opportunity using unified database
      const opportunity = await unifiedDatabase.opportunity.create(opportunityData);
      return successResponse(opportunity, 'Opportunity created successfully');
    });
  } catch (error) {
    console.error('Error creating opportunity:', error);
    return errorResponse(500, 'Error creating opportunity');
  }
};

// Update opportunity
const handleUpdateOpportunity = async (
  opportunityId: string,
  event: HandlerEvent
): Promise<HandlerResponse> => {
  const body = parseBody(event);

  if (!body) {
    return errorResponse(400, 'Request body is required');
  }

  // Validate amount if provided
  if (body.amount !== undefined) {
    const amount = parseFloat(body.amount);
    if (isNaN(amount) || amount < 0) {
      return errorResponse(400, 'Amount must be a positive number');
    }
  }

  // Validate stage if provided
  const validStages = ['PROSPECT', 'QUALIFIED', 'PROPOSAL', 'NEGOTIATION', 'CLOSED_WON', 'CLOSED_LOST'];
  if (body.stage && validStages.indexOf(body.stage) === -1) {
    return errorResponse(400, `Invalid stage. Must be one of: ${validStages.join(', ')}`);
  }

  try {
    return await withUnifiedDatabase(async () => {
      // Check if opportunity exists
      const existingOpportunity = await unifiedDatabase.opportunity.findById(opportunityId);
      
      if (!existingOpportunity) {
        return errorResponse(404, 'Opportunity not found');
      }
      
      // Build update data object with only the fields that need to be updated
      const updateData = {
        ...(body.title !== undefined && { title: body.title }),
        ...(body.amount !== undefined && { amount: parseFloat(body.amount) }),
        ...(body.stage !== undefined && { stage: body.stage }),
        ...(body.leadId !== undefined && { leadId: body.leadId }),
        ...(body.assignedTo !== undefined && { assignedTo: body.assignedTo }),
        updatedAt: new Date().toISOString(),
      };
      
      // Update using unified database
      const updatedOpportunity = await unifiedDatabase.opportunity.update(opportunityId, updateData);
      return successResponse(updatedOpportunity, 'Opportunity updated successfully');
    });
  } catch (error) {
    console.error('Error updating opportunity:', error);
    return errorResponse(500, 'Error updating opportunity');
  }
};

// Delete opportunity
const handleDeleteOpportunity = async (opportunityId: string): Promise<HandlerResponse> => {
  try {
    return await withUnifiedDatabase(async () => {
      // Check if opportunity exists
      const opportunity = await unifiedDatabase.opportunity.findById(opportunityId);
      
      if (!opportunity) {
        return errorResponse(404, 'Opportunity not found');
      }
      
      // Delete using unified database
      await unifiedDatabase.opportunity.delete(opportunityId);
      return successResponse(null, 'Opportunity deleted successfully');
    });
  } catch (error) {
    console.error('Error deleting opportunity:', error);
    return errorResponse(500, 'Error deleting opportunity');
  }
};