### Netlify Blob Integration API Test Endpoints
### Use with REST Client extension in VS Code
### Replace {{baseUrl}} with your actual base URL

@baseUrl = http://localhost:8888/.netlify/functions
# For production: @baseUrl = https://your-site.netlify.app/.netlify/functions
@token = your-bearer-token-here

### =========================================
### USERS API TESTS
### =========================================

### Get all users
GET {{baseUrl}}/users
Authorization: Bearer {{token}}

### Get specific user
GET {{baseUrl}}/users/123e4567-e89b-12d3-a456-426614174000
Authorization: Bearer {{token}}

### Create new user
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "name": "John Doe",
  "role": "ADMIN"
}

### Create user - minimal required fields
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "jane.smith@example.com",
  "name": "Jane Smith"
}

### Update user
PUT {{baseUrl}}/users/123e4567-e89b-12d3-a456-426614174000
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "John Doe Updated",
  "role": "USER"
}

### Delete user
DELETE {{baseUrl}}/users/123e4567-e89b-12d3-a456-426614174000
Authorization: Bearer {{token}}

### =========================================
### LEADS API TESTS
### =========================================

### Get all leads
GET {{baseUrl}}/leads
Authorization: Bearer {{token}}

### Get specific lead
GET {{baseUrl}}/leads/456e7890-e89b-12d3-a456-426614174001
Authorization: Bearer {{token}}

### Create new lead - complete
POST {{baseUrl}}/leads
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Acme Corporation",
  "email": "contact@acme.com",
  "phone": "+1-555-0123",
  "company": "Acme Corp",
  "status": "QUALIFIED",
  "assignedTo": "123e4567-e89b-12d3-a456-426614174000"
}

### Create lead - minimal required fields
POST {{baseUrl}}/leads
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Tech Startup Inc",
  "email": "hello@techstartup.com"
}

### Update lead status
PUT {{baseUrl}}/leads/456e7890-e89b-12d3-a456-426614174001
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "status": "CONVERTED",
  "assignedTo": "789e0123-e89b-12d3-a456-426614174002"
}

### Update lead details
PUT {{baseUrl}}/leads/456e7890-e89b-12d3-a456-426614174001
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "phone": "+1-555-9999",
  "company": "Acme Corporation Ltd"
}

### Delete lead
DELETE {{baseUrl}}/leads/456e7890-e89b-12d3-a456-426614174001
Authorization: Bearer {{token}}

### =========================================
### OPPORTUNITIES API TESTS
### =========================================

### Get all opportunities
GET {{baseUrl}}/opportunities
Authorization: Bearer {{token}}

### Get opportunities by lead ID
GET {{baseUrl}}/opportunities?leadId=456e7890-e89b-12d3-a456-426614174001
Authorization: Bearer {{token}}

### Get specific opportunity
GET {{baseUrl}}/opportunities/789e0123-e89b-12d3-a456-426614174002
Authorization: Bearer {{token}}

### Create new opportunity - complete
POST {{baseUrl}}/opportunities
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "title": "Website Redesign Project",
  "amount": 25000.50,
  "stage": "PROPOSAL",
  "leadId": "456e7890-e89b-12d3-a456-426614174001",
  "assignedTo": "123e4567-e89b-12d3-a456-426614174000"
}

### Create opportunity - minimal required fields
POST {{baseUrl}}/opportunities
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "title": "Software Development Contract",
  "amount": 50000,
  "leadId": "456e7890-e89b-12d3-a456-426614174001"
}

### Update opportunity stage
PUT {{baseUrl}}/opportunities/789e0123-e89b-12d3-a456-426614174002
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "stage": "NEGOTIATION",
  "amount": 27500.00
}

### Close opportunity as won
PUT {{baseUrl}}/opportunities/789e0123-e89b-12d3-a456-426614174002
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "stage": "CLOSED_WON"
}

### Delete opportunity
DELETE {{baseUrl}}/opportunities/789e0123-e89b-12d3-a456-426614174002
Authorization: Bearer {{token}}

### =========================================
### STAFF API TESTS
### =========================================

### Get all staff
GET {{baseUrl}}/staff
Authorization: Bearer {{token}}

### Get specific staff member
GET {{baseUrl}}/staff/abc1234d-e89b-12d3-a456-426614174003
Authorization: Bearer {{token}}

### Create new staff member - complete
POST {{baseUrl}}/staff
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "alice.johnson@company.com",
  "name": "Alice Johnson",
  "role": "Sales Manager",
  "department": "Sales",
  "phone": "+1-555-0156",
  "status": "ACTIVE"
}

### Create staff member - minimal required fields
POST {{baseUrl}}/staff
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "bob.wilson@company.com",
  "name": "Bob Wilson",
  "role": "Developer"
}

### Update staff member
PUT {{baseUrl}}/staff/abc1234d-e89b-12d3-a456-426614174003
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "department": "Engineering",
  "role": "Senior Developer",
  "phone": "+1-555-0199"
}

### Deactivate staff member
PUT {{baseUrl}}/staff/abc1234d-e89b-12d3-a456-426614174003
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "status": "INACTIVE"
}

### Delete staff member
DELETE {{baseUrl}}/staff/abc1234d-e89b-12d3-a456-426614174003
Authorization: Bearer {{token}}

### =========================================
### ERROR HANDLING TESTS
### =========================================

### Test missing authorization
GET {{baseUrl}}/users

### Test invalid authorization
GET {{baseUrl}}/users
Authorization: Bearer invalid-token

### Test missing required fields - user
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Missing Email"
}

### Test invalid email format
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "invalid-email",
  "name": "Invalid Email User"
}

### Test duplicate email
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "name": "Duplicate Email User"
}

### Test invalid opportunity amount
POST {{baseUrl}}/opportunities
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "title": "Invalid Amount Opportunity",
  "amount": -1000,
  "leadId": "456e7890-e89b-12d3-a456-426614174001"
}

### Test invalid opportunity stage
POST {{baseUrl}}/opportunities
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "title": "Invalid Stage Opportunity",
  "amount": 5000,
  "stage": "INVALID_STAGE",
  "leadId": "456e7890-e89b-12d3-a456-426614174001"
}

### Test non-existent resource
GET {{baseUrl}}/users/non-existent-id
Authorization: Bearer {{token}}

### Test invalid HTTP method
PATCH {{baseUrl}}/users
Authorization: Bearer {{token}}

### =========================================
### CORS PREFLIGHT TESTS
### =========================================

### Test CORS preflight for users
OPTIONS {{baseUrl}}/users
Origin: http://localhost:5173

### Test CORS preflight for leads
OPTIONS {{baseUrl}}/leads
Origin: http://localhost:5173

### =========================================
### BATCH TESTING SCENARIOS
### =========================================

### 1. Complete user workflow
# Create user -> Update user -> Get user -> Delete user

### 2. Lead to opportunity workflow
# Create lead -> Create opportunity for lead -> Update opportunity -> Close opportunity

### 3. Staff management workflow
# Create staff -> Assign to lead -> Update staff details -> Deactivate staff

### =========================================
### PERFORMANCE TESTING
### =========================================

### Test with large dataset - create multiple users
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "user1@test.com",
  "name": "Test User 1"
}

###
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "user2@test.com",
  "name": "Test User 2"
}

###
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "user3@test.com",
  "name": "Test User 3"
}

### Then test listing all users
GET {{baseUrl}}/users
Authorization: Bearer {{token}}

### =========================================
### EDGE CASE TESTS
### =========================================

### Test empty request body
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{}

### Test malformed JSON
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "test@test.com"
  "name": "Missing Comma"
}

### Test very long strings
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "verylongemail@verylongdomainnamethatshouldstillbevalidbutverylongindeed.com",
  "name": "Very Long Name That Tests The System's Ability To Handle Long String Values"
}

### Test special characters
POST {{baseUrl}}/leads
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Company with Special Characters: &<>\"'",
  "email": "test+special@example.com"
}

### Test Unicode characters
POST {{baseUrl}}/staff
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "unicode.test@example.com",
  "name": "José García-Martínez",
  "role": "Développeur Senior"
}